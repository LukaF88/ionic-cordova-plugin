import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';
import * as Hammer from 'hammerjs';
// const LONG_PRESS_DEFAULT_TIMEOUT = 500;
// const MIN_LONG_PRESS_TIMEOUT = 40;
let LongPressDirective = class LongPressDirective {
    constructor(zone, el) {
        this.zone = zone;
        this.pressed = new EventEmitter();
        this.longPressed = new EventEmitter();
        this.pressEnded = new EventEmitter();
        this.el = el.nativeElement;
    }
    ngOnInit() {
        if (!this.interval)
            this.interval = 500;
        if (this.interval < 40) {
            throw new Error('A limit of 40ms is imposed so you don\'t destroy device performance. If you need less than a 40ms interval, please file an issue explaining your use case.');
        }
        this._hammer = new Hammer.Manager(this.el, {
            recognizers: [
                [Hammer.Pan, { direction: Hammer.DIRECTION_VERTICAL }],
                [Hammer.Press],
                [Hammer.Tap],
            ],
        });
        this._hammer.on('pan', (e) => {
            this.onPressEnd();
        });
        this._hammer.on('press', (e) => {
            this.pressed.emit(e);
            this.clearInt();
            this.int = setInterval(() => {
                this.longPressed.emit();
            }, this.interval);
        });
        this._hammer.on('pressup', (e) => {
            this.onPressEnd();
        });
        this._hammer.on('release', (e) => {
            this.onPressEnd();
        });
        this.el.addEventListener('mouseleave', (e) => {
            this.onPressEnd();
        });
        this.el.addEventListener('mouseout', (e) => {
            this.onPressEnd();
        });
    }
    clearInt() {
        if (this.int !== undefined) {
            clearInterval(this.int);
            this.int = undefined;
        }
    }
    onPressEnd() {
        this.clearInt();
        this.pressEnded.emit();
    }
    ngOnDestroy() {
        this.onPressEnd();
        if (this._hammer) {
            this._hammer.destroy();
            this._hammer = null;
        }
    }
};
LongPressDirective.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef }
];
tslib_1.__decorate([
    Input()
], LongPressDirective.prototype, "interval", void 0);
tslib_1.__decorate([
    Output()
], LongPressDirective.prototype, "pressed", void 0);
tslib_1.__decorate([
    Output()
], LongPressDirective.prototype, "longPressed", void 0);
tslib_1.__decorate([
    Output()
], LongPressDirective.prototype, "pressEnded", void 0);
LongPressDirective = tslib_1.__decorate([
    Directive({
        selector: '[ion-long-press]',
    })
], LongPressDirective);
export { LongPressDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9uZy1wcmVzcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYy1sb25nLXByZXNzLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9sb25nLXByZXNzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUcsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFFbkMsMENBQTBDO0FBRTFDLHFDQUFxQztBQUtyQyxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQVk3QixZQUFtQixJQUFZLEVBQ25CLEVBQWM7UUFEUCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBUnJCLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNoRCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3BELGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVEzRCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDN0IsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEpBQTRKLENBQUMsQ0FBQztTQUNqTDtRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDekMsV0FBVyxFQUFFO2dCQUNYLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsa0JBQWtCLEVBQUMsQ0FBQztnQkFDcEQsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNkLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNiO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQixDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBUSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRTtZQUNoRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFO1lBQzlDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUN4QixhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNyQjtJQUNILENBQUM7Q0FDRixDQUFBOztZQW5FMEIsTUFBTTtZQUNmLFVBQVU7O0FBWGpCO0lBQVIsS0FBSyxFQUFFO29EQUFrQjtBQUVoQjtJQUFULE1BQU0sRUFBRTttREFBaUQ7QUFDaEQ7SUFBVCxNQUFNLEVBQUU7dURBQXFEO0FBQ3BEO0lBQVQsTUFBTSxFQUFFO3NEQUFvRDtBQU5sRCxrQkFBa0I7SUFIOUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGtCQUFrQjtLQUM3QixDQUFDO0dBQ1csa0JBQWtCLENBK0U5QjtTQS9FWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgSGFtbWVyIGZyb20gJ2hhbW1lcmpzJztcblxuLy8gY29uc3QgTE9OR19QUkVTU19ERUZBVUxUX1RJTUVPVVQgPSA1MDA7XG5cbi8vIGNvbnN0IE1JTl9MT05HX1BSRVNTX1RJTUVPVVQgPSA0MDtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lvbi1sb25nLXByZXNzXScsXG59KVxuZXhwb3J0IGNsYXNzIExvbmdQcmVzc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBpbnRlcnZhbDogbnVtYmVyO1xuXG4gIEBPdXRwdXQoKSBwcmVzc2VkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGxvbmdQcmVzc2VkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIHByZXNzRW5kZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZWw6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIF9oYW1tZXI6IEhhbW1lck1hbmFnZXI7XG4gIHByaXZhdGUgaW50OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHpvbmU6IE5nWm9uZSxcbiAgICAgICAgICAgICAgZWw6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLmVsID0gZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pbnRlcnZhbCkgdGhpcy5pbnRlcnZhbCA9IDUwMDtcbiAgICBpZiAodGhpcy5pbnRlcnZhbCA8IDQwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQSBsaW1pdCBvZiA0MG1zIGlzIGltcG9zZWQgc28geW91IGRvblxcJ3QgZGVzdHJveSBkZXZpY2UgcGVyZm9ybWFuY2UuIElmIHlvdSBuZWVkIGxlc3MgdGhhbiBhIDQwbXMgaW50ZXJ2YWwsIHBsZWFzZSBmaWxlIGFuIGlzc3VlIGV4cGxhaW5pbmcgeW91ciB1c2UgY2FzZS4nKTtcbiAgICB9XG5cbiAgICB0aGlzLl9oYW1tZXIgPSBuZXcgSGFtbWVyLk1hbmFnZXIodGhpcy5lbCwge1xuICAgICAgcmVjb2duaXplcnM6IFtcbiAgICAgICAgW0hhbW1lci5QYW4sIHtkaXJlY3Rpb246IEhhbW1lci5ESVJFQ1RJT05fVkVSVElDQUx9XSxcbiAgICAgICAgW0hhbW1lci5QcmVzc10sXG4gICAgICAgIFtIYW1tZXIuVGFwXSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICB0aGlzLl9oYW1tZXIub24oJ3BhbicsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMub25QcmVzc0VuZCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5faGFtbWVyLm9uKCdwcmVzcycsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMucHJlc3NlZC5lbWl0KGUpO1xuICAgICAgdGhpcy5jbGVhckludCgpO1xuICAgICAgdGhpcy5pbnQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHRoaXMubG9uZ1ByZXNzZWQuZW1pdCgpO1xuICAgICAgfSwgdGhpcy5pbnRlcnZhbCkgYXMgYW55O1xuICAgIH0pO1xuXG4gICAgdGhpcy5faGFtbWVyLm9uKCdwcmVzc3VwJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vblByZXNzRW5kKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9oYW1tZXIub24oJ3JlbGVhc2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLm9uUHJlc3NFbmQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMub25QcmVzc0VuZCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMub25QcmVzc0VuZCgpO1xuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJJbnQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludCk7XG4gICAgICAgIHRoaXMuaW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIG9uUHJlc3NFbmQoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhckludCgpO1xuICAgIHRoaXMucHJlc3NFbmRlZC5lbWl0KCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLm9uUHJlc3NFbmQoKTtcbiAgICBpZiAodGhpcy5faGFtbWVyKSB7XG4gICAgICB0aGlzLl9oYW1tZXIuZGVzdHJveSgpO1xuICAgICAgdGhpcy5faGFtbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
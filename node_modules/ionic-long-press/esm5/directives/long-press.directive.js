import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';
import * as Hammer from 'hammerjs';
// const LONG_PRESS_DEFAULT_TIMEOUT = 500;
// const MIN_LONG_PRESS_TIMEOUT = 40;
var LongPressDirective = /** @class */ (function () {
    function LongPressDirective(zone, el) {
        this.zone = zone;
        this.pressed = new EventEmitter();
        this.longPressed = new EventEmitter();
        this.pressEnded = new EventEmitter();
        this.el = el.nativeElement;
    }
    LongPressDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.interval)
            this.interval = 500;
        if (this.interval < 40) {
            throw new Error('A limit of 40ms is imposed so you don\'t destroy device performance. If you need less than a 40ms interval, please file an issue explaining your use case.');
        }
        this._hammer = new Hammer.Manager(this.el, {
            recognizers: [
                [Hammer.Pan, { direction: Hammer.DIRECTION_VERTICAL }],
                [Hammer.Press],
                [Hammer.Tap],
            ],
        });
        this._hammer.on('pan', function (e) {
            _this.onPressEnd();
        });
        this._hammer.on('press', function (e) {
            _this.pressed.emit(e);
            _this.clearInt();
            _this.int = setInterval(function () {
                _this.longPressed.emit();
            }, _this.interval);
        });
        this._hammer.on('pressup', function (e) {
            _this.onPressEnd();
        });
        this._hammer.on('release', function (e) {
            _this.onPressEnd();
        });
        this.el.addEventListener('mouseleave', function (e) {
            _this.onPressEnd();
        });
        this.el.addEventListener('mouseout', function (e) {
            _this.onPressEnd();
        });
    };
    LongPressDirective.prototype.clearInt = function () {
        if (this.int !== undefined) {
            clearInterval(this.int);
            this.int = undefined;
        }
    };
    LongPressDirective.prototype.onPressEnd = function () {
        this.clearInt();
        this.pressEnded.emit();
    };
    LongPressDirective.prototype.ngOnDestroy = function () {
        this.onPressEnd();
        if (this._hammer) {
            this._hammer.destroy();
            this._hammer = null;
        }
    };
    LongPressDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input()
    ], LongPressDirective.prototype, "interval", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "pressed", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "longPressed", void 0);
    tslib_1.__decorate([
        Output()
    ], LongPressDirective.prototype, "pressEnded", void 0);
    LongPressDirective = tslib_1.__decorate([
        Directive({
            selector: '[ion-long-press]',
        })
    ], LongPressDirective);
    return LongPressDirective;
}());
export { LongPressDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9uZy1wcmVzcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYy1sb25nLXByZXNzLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9sb25nLXByZXNzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUcsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFFbkMsMENBQTBDO0FBRTFDLHFDQUFxQztBQUtyQztJQVlFLDRCQUFtQixJQUFZLEVBQ25CLEVBQWM7UUFEUCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBUnJCLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNoRCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3BELGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVEzRCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDN0IsQ0FBQztJQUVELHFDQUFRLEdBQVI7UUFBQSxpQkF5Q0M7UUF4Q0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7UUFDeEMsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDRKQUE0SixDQUFDLENBQUM7U0FDakw7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ3pDLFdBQVcsRUFBRTtnQkFDWCxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFDLENBQUM7Z0JBQ3BELENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDZCxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDYjtTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxVQUFDLENBQU07WUFDNUIsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsQ0FBTTtZQUM5QixLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixLQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEIsS0FBSSxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUM7Z0JBQ3JCLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDMUIsQ0FBQyxFQUFFLEtBQUksQ0FBQyxRQUFRLENBQVEsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFDLENBQU07WUFDaEMsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQUMsQ0FBTTtZQUNoQyxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxVQUFDLENBQU07WUFDNUMsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsVUFBQyxDQUFNO1lBQzFDLEtBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxxQ0FBUSxHQUFSO1FBQ0UsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUN4QixhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELHVDQUFVLEdBQVY7UUFDRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsd0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNyQjtJQUNILENBQUM7O2dCQWxFd0IsTUFBTTtnQkFDZixVQUFVOztJQVhqQjtRQUFSLEtBQUssRUFBRTt3REFBa0I7SUFFaEI7UUFBVCxNQUFNLEVBQUU7dURBQWlEO0lBQ2hEO1FBQVQsTUFBTSxFQUFFOzJEQUFxRDtJQUNwRDtRQUFULE1BQU0sRUFBRTswREFBb0Q7SUFObEQsa0JBQWtCO1FBSDlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxrQkFBa0I7U0FDN0IsQ0FBQztPQUNXLGtCQUFrQixDQStFOUI7SUFBRCx5QkFBQztDQUFBLEFBL0VELElBK0VDO1NBL0VZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBIYW1tZXIgZnJvbSAnaGFtbWVyanMnO1xuXG4vLyBjb25zdCBMT05HX1BSRVNTX0RFRkFVTFRfVElNRU9VVCA9IDUwMDtcblxuLy8gY29uc3QgTUlOX0xPTkdfUFJFU1NfVElNRU9VVCA9IDQwO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW9uLWxvbmctcHJlc3NdJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9uZ1ByZXNzRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIGludGVydmFsOiBudW1iZXI7XG5cbiAgQE91dHB1dCgpIHByZXNzZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbG9uZ1ByZXNzZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgcHJlc3NFbmRlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBlbDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgX2hhbW1lcjogSGFtbWVyTWFuYWdlcjtcbiAgcHJpdmF0ZSBpbnQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgem9uZTogTmdab25lLFxuICAgICAgICAgICAgICBlbDogRWxlbWVudFJlZikge1xuICAgIHRoaXMuZWwgPSBlbC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmludGVydmFsKSB0aGlzLmludGVydmFsID0gNTAwO1xuICAgIGlmICh0aGlzLmludGVydmFsIDwgNDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIGxpbWl0IG9mIDQwbXMgaXMgaW1wb3NlZCBzbyB5b3UgZG9uXFwndCBkZXN0cm95IGRldmljZSBwZXJmb3JtYW5jZS4gSWYgeW91IG5lZWQgbGVzcyB0aGFuIGEgNDBtcyBpbnRlcnZhbCwgcGxlYXNlIGZpbGUgYW4gaXNzdWUgZXhwbGFpbmluZyB5b3VyIHVzZSBjYXNlLicpO1xuICAgIH1cblxuICAgIHRoaXMuX2hhbW1lciA9IG5ldyBIYW1tZXIuTWFuYWdlcih0aGlzLmVsLCB7XG4gICAgICByZWNvZ25pemVyczogW1xuICAgICAgICBbSGFtbWVyLlBhbiwge2RpcmVjdGlvbjogSGFtbWVyLkRJUkVDVElPTl9WRVJUSUNBTH1dLFxuICAgICAgICBbSGFtbWVyLlByZXNzXSxcbiAgICAgICAgW0hhbW1lci5UYXBdLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIHRoaXMuX2hhbW1lci5vbigncGFuJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vblByZXNzRW5kKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9oYW1tZXIub24oJ3ByZXNzJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5wcmVzc2VkLmVtaXQoZSk7XG4gICAgICB0aGlzLmNsZWFySW50KCk7XG4gICAgICB0aGlzLmludCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgdGhpcy5sb25nUHJlc3NlZC5lbWl0KCk7XG4gICAgICB9LCB0aGlzLmludGVydmFsKSBhcyBhbnk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9oYW1tZXIub24oJ3ByZXNzdXAnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLm9uUHJlc3NFbmQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2hhbW1lci5vbigncmVsZWFzZScsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMub25QcmVzc0VuZCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vblByZXNzRW5kKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy5vblByZXNzRW5kKCk7XG4gICAgfSk7XG4gIH1cblxuICBjbGVhckludCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50KTtcbiAgICAgICAgdGhpcy5pbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgb25QcmVzc0VuZCgpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFySW50KCk7XG4gICAgdGhpcy5wcmVzc0VuZGVkLmVtaXQoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMub25QcmVzc0VuZCgpO1xuICAgIGlmICh0aGlzLl9oYW1tZXIpIHtcbiAgICAgIHRoaXMuX2hhbW1lci5kZXN0cm95KCk7XG4gICAgICB0aGlzLl9oYW1tZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19